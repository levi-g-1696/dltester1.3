// <auto-generated />
using System;
using Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(DL_TesterContext))]
    [Migration("20220509185251_initcreate")]
    partial class initcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Hebrew_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.DataSchedual", b =>
                {
                    b.Property<int>("SchedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SchedID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("MonitorsVal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("monitorsVal");

                    b.Property<int?>("RepeatCounter")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionID");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.Property<bool?>("WasErrorOnSending")
                        .HasColumnType("bit");

                    b.HasKey("SchedId");

                    b.ToTable("DataScheduals");
                });

            modelBuilder.Entity("Entities.Models.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DestinationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IPaddress");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("ProtocolType")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int?>("Protocolid")
                        .HasColumnType("int");

                    b.Property<string>("SrvPassword")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SrvUser")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VirtualPath")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("DestinationId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("Entities.Models.MonitorList", b =>
                {
                    b.Property<int>("MonListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MonListID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MonitorNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("MonListId");

                    b.ToTable("MonitorLists");
                });

            modelBuilder.Entity("Entities.Models.OutputType", b =>
                {
                    b.Property<int>("OutputTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OutputTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OutputTypeId");

                    b.ToTable("OutputTypes");
                });

            modelBuilder.Entity("Entities.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SessionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("int")
                        .HasColumnName("DestinationID");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("HasConfirmation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("MonitorListId")
                        .HasColumnType("int")
                        .HasColumnName("MonitorListID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("OutputTypeId")
                        .HasColumnType("int")
                        .HasColumnName("OutputTypeID");

                    b.Property<double?>("Pause")
                        .HasColumnType("float");

                    b.Property<int?>("Repeat")
                        .HasColumnType("int");

                    b.Property<int?>("SpecHeaderId")
                        .HasColumnType("int")
                        .HasColumnName("SpecHeaderID");

                    b.Property<bool?>("StartOnEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TimingBase")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("ValTimesId")
                        .HasColumnType("int")
                        .HasColumnName("ValTimesID");

                    b.HasKey("SessionId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("MonitorListId");

                    b.HasIndex("OutputTypeId");

                    b.HasIndex("SpecHeaderId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Entities.Models.SpecialHeader", b =>
                {
                    b.Property<int>("SpecHeaderId")
                        .HasColumnType("int")
                        .HasColumnName("SpecHeaderID");

                    b.Property<string>("Line1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Line2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Line3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Line4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Line5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Line6")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.HasKey("SpecHeaderId");

                    b.ToTable("SpecialHeaders");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 20,
                            CreationDate = new DateTime(2022, 5, 9, 21, 52, 50, 904, DateTimeKind.Local).AddTicks(1806),
                            ExpirationDate = new DateTime(2022, 5, 10, 21, 52, 50, 908, DateTimeKind.Local).AddTicks(6135),
                            IsAdmin = true,
                            IsEnable = true,
                            Password = "Aa12345",
                            UserName = "admin2"
                        },
                        new
                        {
                            UserId = 21,
                            CreationDate = new DateTime(2022, 5, 9, 21, 52, 50, 908, DateTimeKind.Local).AddTicks(7955),
                            ExpirationDate = new DateTime(2022, 5, 10, 21, 52, 50, 908, DateTimeKind.Local).AddTicks(8001),
                            IsAdmin = true,
                            IsEnable = true,
                            Password = "1234",
                            UserName = "user3"
                        },
                        new
                        {
                            UserId = 22,
                            CreationDate = new DateTime(2022, 5, 9, 21, 52, 50, 908, DateTimeKind.Local).AddTicks(8014),
                            ExpirationDate = new DateTime(2022, 5, 10, 21, 52, 50, 908, DateTimeKind.Local).AddTicks(8021),
                            IsAdmin = true,
                            IsEnable = true,
                            Password = "1234",
                            UserName = "user4"
                        });
                });

            modelBuilder.Entity("Entities.Models.ValuesTime", b =>
                {
                    b.Property<int>("ValTimesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ValTimesID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("DuringTime")
                        .HasColumnType("float");

                    b.Property<string>("MonFrom")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MonListId")
                        .HasColumnType("int")
                        .HasColumnName("MonListID");

                    b.Property<string>("MonNames")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MonTo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ValTimesId")
                        .HasName("PK_ValuesTimes_1");

                    b.HasIndex("MonListId");

                    b.ToTable("ValuesTimes");
                });

            modelBuilder.Entity("Entities.Models.Session", b =>
                {
                    b.HasOne("Entities.Models.Destination", "Destination")
                        .WithMany("Sessions")
                        .HasForeignKey("DestinationId")
                        .HasConstraintName("FK_Sessions_Destinations");

                    b.HasOne("Entities.Models.MonitorList", "MonitorList")
                        .WithMany("Sessions")
                        .HasForeignKey("MonitorListId")
                        .HasConstraintName("FK_Sessions_MonitorLists");

                    b.HasOne("Entities.Models.OutputType", "OutputType")
                        .WithMany("Sessions")
                        .HasForeignKey("OutputTypeId")
                        .HasConstraintName("FK_Sessions_OutputTypes");

                    b.HasOne("Entities.Models.SpecialHeader", "SpecHeader")
                        .WithMany("Sessions")
                        .HasForeignKey("SpecHeaderId")
                        .HasConstraintName("FK_Sessions_SpecialHeaders");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Sessions_users");

                    b.Navigation("Destination");

                    b.Navigation("MonitorList");

                    b.Navigation("OutputType");

                    b.Navigation("SpecHeader");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.ValuesTime", b =>
                {
                    b.HasOne("Entities.Models.MonitorList", "MonList")
                        .WithMany("ValuesTimes")
                        .HasForeignKey("MonListId")
                        .HasConstraintName("FK_ValuesTimes_MonitorLists");

                    b.Navigation("MonList");
                });

            modelBuilder.Entity("Entities.Models.Destination", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Entities.Models.MonitorList", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("ValuesTimes");
                });

            modelBuilder.Entity("Entities.Models.OutputType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Entities.Models.SpecialHeader", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
